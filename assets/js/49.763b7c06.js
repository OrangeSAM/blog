(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{354:function(t,i,e){"use strict";e.r(i);var v=e(3),l=Object(v.a)({},(function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"一些疑惑"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一些疑惑"}},[t._v("#")]),t._v(" 一些疑惑")]),t._v(" "),e("ul",[e("li",[t._v("final string name 中的 name 是什么意思")]),t._v(" "),e("li",[t._v("@override 之前的代码就是声明的参数？")]),t._v(" "),e("li",[t._v("return home 和 return scaffold 的差别, 还有 MaterialApp")]),t._v(" "),e("li",[t._v("页面一般分两个部分？ appbar 和 body")]),t._v(" "),e("li",[t._v("flutter 就是以部件（widget）的方式来写代码？\n诸如 Center RaisedButton 这些都是 flutter 这个框架提供的。")]),t._v(" "),e("li",[t._v("stateless 对应 statsful")]),t._v(" "),e("li",[t._v("多个 child 就用 children?")]),t._v(" "),e("li",[t._v("child 是不是所有 widget 都有的属性")]),t._v(" "),e("li",[t._v("super 是干嘛用的")]),t._v(" "),e("li",[t._v("ProductDetail({Key key ,@required this.product}):super(key:key);\n这是在干嘛")]),t._v(" "),e("li",[t._v("没有写 pop 也有返回上一级页面的按钮，是 flutter 框架整的？")])]),t._v(" "),e("h3",{attrs:{id:"一些要点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一些要点"}},[t._v("#")]),t._v(" 一些要点")]),t._v(" "),e("ul",[e("li",[t._v("flutter 一切皆组件！")]),t._v(" "),e("li",[t._v("Navigator.push 跳转到下一个页面，接手两个参数，上下文 context 和 要跳转的函数")]),t._v(" "),e("li",[t._v("Navigator.pop 返回到上一个页面")]),t._v(" "),e("li",[t._v("MaterialPageRoute 传递路由参数")])]),t._v(" "),e("h3",{attrs:{id:"一些命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一些命令"}},[t._v("#")]),t._v(" 一些命令")]),t._v(" "),e("ul",[e("li",[t._v("flutter create 项目名")]),t._v(" "),e("li",[t._v("flutter run 跑项目")]),t._v(" "),e("li",[t._v("flutter packages get == npm install")]),t._v(" "),e("li")]),t._v(" "),e("h3",{attrs:{id:"官方文档中的笔记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#官方文档中的笔记"}},[t._v("#")]),t._v(" 官方文档中的笔记")]),t._v(" "),e("ul",[e("li",[t._v("Material 是一种标准的移动端和 web 端的视觉设计语言。 Flutter 提供了一套丰富的 Material widgets。")]),t._v(" "),e("li",[t._v("main 函数使用了(=>)符号, 这是 Dart 中单行函数或方法的简写。即 JS 中的箭头函数。")]),t._v(" "),e("li",[t._v("该应用程序继承了 StatelessWidget，这将会使应用本身也成为一个 widget。 在 Flutter 中，大多数东西都是 widget，包括对齐(alignment)、填充(padding)和布局(layout)。")]),t._v(" "),e("li",[t._v("Scaffold 是 Material library 中提供的一个 widget, 它提供了默认的导航栏、标题和包含主屏幕 widget 树的 body 属性。widget 树可以很复杂。可以认为是每个页面的骨架。")]),t._v(" "),e("li",[t._v("widget 的主要工作是提供一个 build() 方法来描述如何根据其他较低级别的 widget 来显示自己.")]),t._v(" "),e("li",[t._v("Stateless widgets 是不可变的, 这意味着它们的属性不能改变 - 所有的值都是最终的.")]),t._v(" "),e("li",[t._v("Stateful widgets 持有的状态可能在 widget 生命周期中发生变化. 实现一个 stateful widget 至少需要两个类: 一个 StatefulWidget 类, 一个 State 类。StatefulWidget 类本身是不变的，但是 State 类在 widget 生命周期中始终存在。")]),t._v(" "),e("li",[t._v("在 Flutter 的响应式框架柱，调用 setState() 会为 state 对象触发 builde 方法 从而导致对 UI 的更新")])]),t._v(" "),e("ul",[e("li",[t._v("Flutter widget 的中心思想是用 Widget 构建你的 UI。")]),t._v(" "),e("li",[t._v("Widget 描述了他们的视图在给定其当前配置和状态时应该看起来像什么。当 widget 的状态发生变化时，widget 会重新构建 UI，Flutter 会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。")]),t._v(" "),e("li",[t._v("框架强制耿 Widget 覆盖整个屏幕。")]),t._v(" "),e("li",[t._v("在编写应用程序时，通常会创建新的 widget，这些 widget 是无状态的 StatelessWidget 或者是有状态的 StatefulWidget， 具体的选择取决于您的 widget 是否需要管理一些状态。widget 的主要工作是实现一个 build 函数，用以构建自身。一个 widget 通常由一些较低级别 widget 组成。Flutter 框架将依次构建这些 widget，直到构建到最底层的子 widget 时，这些最低层的 widget 通常为 RenderObject，它会计算并描述 widget 的几何形状。")])]),t._v(" "),e("ul",[e("li")]),t._v(" "),e("h4",{attrs:{id:"使用外部包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用外部包"}},[t._v("#")]),t._v(" 使用外部包")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("通过 pubspec 文件进行配置, 类似 package.json 文件.")])]),t._v(" "),e("li",[e("p",[t._v("下载项目中的用到的包, 点击右上角的 package get,(命令 flutter package get) 类似 npm install")])]),t._v(" "),e("li",[e("p",[t._v("在页面中使用, import 'package:'\n类似 npm")]),t._v(" "),e("p",[t._v("flutter packages get 获取项目所有的依赖包。\nflutter packages upgrade 获取项目所有依赖包的最新版本。")])])]),t._v(" "),e("h3",{attrs:{id:"有哪些组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有哪些组件"}},[t._v("#")]),t._v(" 有哪些组件")]),t._v(" "),e("p",[t._v("常用的布局 widget\nText Row Column Stack Container")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Text Widget")]),t._v(" "),e("ul",[e("li",[t._v("TextAlign")]),t._v(" "),e("li",[t._v("maxLines")]),t._v(" "),e("li",[t._v("overflow")]),t._v(" "),e("li",[t._v("style")])])]),t._v(" "),e("li",[e("p",[t._v("RaisedButton")]),t._v(" "),e("ul",[e("li",[t._v("color")]),t._v(" "),e("li",[t._v("child")]),t._v(" "),e("li",[t._v("onPressed 点击事件的响应")]),t._v(" "),e("li",[t._v("onTap")])])]),t._v(" "),e("li",[e("p",[t._v("container")]),t._v(" "),e("ul",[e("li",[t._v("alignment 规定容器内子元素对齐方式")]),t._v(" "),e("li",[t._v("width")]),t._v(" "),e("li",[t._v("height")]),t._v(" "),e("li",[t._v("color")]),t._v(" "),e("li",[t._v("padding")]),t._v(" "),e("li",[t._v("margin")]),t._v(" "),e("li",[t._v("decoration 背景和边框")])])]),t._v(" "),e("li",[e("p",[t._v("Image")]),t._v(" "),e("ul",[e("li",[t._v("asset")]),t._v(" "),e("li",[t._v("network")]),t._v(" "),e("li",[t._v("file")]),t._v(" "),e("li",[t._v("memory")]),t._v(" "),e("li",[t._v("fit\n"),e("ul",[e("li",[t._v("BoxFit.fill")]),t._v(" "),e("li",[t._v("BoxFit.contain")]),t._v(" "),e("li",[t._v("BoxFit.cover")]),t._v(" "),e("li",[t._v("BoxFit.fitWidth")]),t._v(" "),e("li",[t._v("BoxFit.fitHeight")]),t._v(" "),e("li",[t._v("BoxFit.scaleDown")])])]),t._v(" "),e("li",[t._v("colorBlendMode\n"),e("ul",[e("li",[t._v("BlendMode.darken")])])]),t._v(" "),e("li",[t._v("repeat\n"),e("ul",[e("li",[t._v("ImageRepeat.repeat")]),t._v(" "),e("li",[t._v("ImageRepeat.repeatX")]),t._v(" "),e("li",[t._v("IamgeRepeat.repeatY")])])])])]),t._v(" "),e("li",[e("p",[t._v("ListView")]),t._v(" "),e("ul",[e("li",[t._v("children")]),t._v(" "),e("li",[t._v("scrollDirection 列表展示的方向\n"),e("ul",[e("li",[t._v("Axis.horizontal")]),t._v(" "),e("li",[t._v("Axis.vertical")])])]),t._v(" "),e("li",[t._v("builder 方法")])])]),t._v(" "),e("li",[e("p",[t._v("ListTile")])]),t._v(" "),e("li",[e("p",[t._v("GridView")]),t._v(" "),e("ul",[e("li",[t._v("crossAxisSpacing")]),t._v(" "),e("li",[t._v("mainAxisSpacing")]),t._v(" "),e("li",[t._v("crossAxisCount")]),t._v(" "),e("li",[t._v("padding")]),t._v(" "),e("li",[t._v("childAspectRatio")])])]),t._v(" "),e("li",[e("p",[t._v("Expanded")])]),t._v(" "),e("li",[e("p",[t._v("Row")])]),t._v(" "),e("li",[e("p",[t._v("Column")])]),t._v(" "),e("li",[e("p",[t._v("CrossAxisAlignment")])]),t._v(" "),e("li",[e("p",[t._v("Stack")])]),t._v(" "),e("li",[e("p",[t._v("alignment 控制层叠的位置")])]),t._v(" "),e("li",[e("p",[t._v("Positioned")])]),t._v(" "),e("li",[e("p",[t._v("circleAvatar")])]),t._v(" "),e("li",[e("p",[t._v("radius")])])])])}),[],!1,null,null,null);i.default=l.exports}}]);